/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Comic as PrismaComic,
  Chapter as PrismaChapter,
} from "@prisma/client";

export class ComicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ComicCountArgs, "select">): Promise<number> {
    return this.prisma.comic.count(args);
  }

  async comics(args: Prisma.ComicFindManyArgs): Promise<PrismaComic[]> {
    return this.prisma.comic.findMany(args);
  }
  async comic(args: Prisma.ComicFindUniqueArgs): Promise<PrismaComic | null> {
    return this.prisma.comic.findUnique(args);
  }
  async createComic(args: Prisma.ComicCreateArgs): Promise<PrismaComic> {
    return this.prisma.comic.create(args);
  }
  async updateComic(args: Prisma.ComicUpdateArgs): Promise<PrismaComic> {
    return this.prisma.comic.update(args);
  }
  async deleteComic(args: Prisma.ComicDeleteArgs): Promise<PrismaComic> {
    return this.prisma.comic.delete(args);
  }

  async findChapters(
    parentId: string,
    args: Prisma.ChapterFindManyArgs
  ): Promise<PrismaChapter[]> {
    return this.prisma.comic
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .chapters(args);
  }
}
