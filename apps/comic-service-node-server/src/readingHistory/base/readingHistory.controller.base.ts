/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReadingHistoryService } from "../readingHistory.service";
import { ReadingHistoryCreateInput } from "./ReadingHistoryCreateInput";
import { ReadingHistory } from "./ReadingHistory";
import { ReadingHistoryFindManyArgs } from "./ReadingHistoryFindManyArgs";
import { ReadingHistoryWhereUniqueInput } from "./ReadingHistoryWhereUniqueInput";
import { ReadingHistoryUpdateInput } from "./ReadingHistoryUpdateInput";

export class ReadingHistoryControllerBase {
  constructor(protected readonly service: ReadingHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReadingHistory })
  async createReadingHistory(
    @common.Body() data: ReadingHistoryCreateInput
  ): Promise<ReadingHistory> {
    return await this.service.createReadingHistory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReadingHistory] })
  @ApiNestedQuery(ReadingHistoryFindManyArgs)
  async readingHistories(
    @common.Req() request: Request
  ): Promise<ReadingHistory[]> {
    const args = plainToClass(ReadingHistoryFindManyArgs, request.query);
    return this.service.readingHistories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReadingHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async readingHistory(
    @common.Param() params: ReadingHistoryWhereUniqueInput
  ): Promise<ReadingHistory | null> {
    const result = await this.service.readingHistory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReadingHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReadingHistory(
    @common.Param() params: ReadingHistoryWhereUniqueInput,
    @common.Body() data: ReadingHistoryUpdateInput
  ): Promise<ReadingHistory | null> {
    try {
      return await this.service.updateReadingHistory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReadingHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReadingHistory(
    @common.Param() params: ReadingHistoryWhereUniqueInput
  ): Promise<ReadingHistory | null> {
    try {
      return await this.service.deleteReadingHistory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
