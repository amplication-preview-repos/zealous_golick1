/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ReadingHistory as PrismaReadingHistory } from "@prisma/client";

export class ReadingHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReadingHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.readingHistory.count(args);
  }

  async readingHistories(
    args: Prisma.ReadingHistoryFindManyArgs
  ): Promise<PrismaReadingHistory[]> {
    return this.prisma.readingHistory.findMany(args);
  }
  async readingHistory(
    args: Prisma.ReadingHistoryFindUniqueArgs
  ): Promise<PrismaReadingHistory | null> {
    return this.prisma.readingHistory.findUnique(args);
  }
  async createReadingHistory(
    args: Prisma.ReadingHistoryCreateArgs
  ): Promise<PrismaReadingHistory> {
    return this.prisma.readingHistory.create(args);
  }
  async updateReadingHistory(
    args: Prisma.ReadingHistoryUpdateArgs
  ): Promise<PrismaReadingHistory> {
    return this.prisma.readingHistory.update(args);
  }
  async deleteReadingHistory(
    args: Prisma.ReadingHistoryDeleteArgs
  ): Promise<PrismaReadingHistory> {
    return this.prisma.readingHistory.delete(args);
  }
}
